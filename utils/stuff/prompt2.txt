У меня есть результат распознавания речи для некоторой записи, на которой проговорён некоторый алгоритм. Твоя задача - на основе распознанного текста (распознавание не точное) понять, что за алгоритм в нём описан. 

ВАЖНО! При необходимости используй только СТАНДАРТНЫЕ БИБЛИОТЕКИ.

ВАЖНО! Код должен принимать входные данные через STDIN и возвращать результат работы через STDOUT. Примерно так, как это реализовано в коде на первой задаче. Если входные данные имеют неверный формат, тип или размер, или при вычислениях возникает неразрешимая ситуация, программа должна корректно завершиться и вывести ошибку в формате, описанном в задаче.

ВАЖНО! Данные должны вводиться и выводиться в том порядке, в котором они перечисляются в задании. Их формат обычно следующий:
- Разные виды данных должны разделяться переносом строки;
- Массив вводится и выводится через пробел;
- Матрица вводится и выводится построчно. Значения внутри строк разделяются пробелами, строки — знаком переноса строки;
- Ввод и вывод должны финально оканчиваться переносом строки.

ВАЖНО! В общем случае код будет проверяться на следующих типах входных данных, когда это допустимо:
а. На допустимых (по значению и формату) входных данных, находящихся внутри класса эквивалентности допустимых значений;
б. На допустимых (по значению и формату) входных данных, находящихся на экстремумах и границах класса эквивалентности допустимых значений;
в. На недопустимых входных данных (по значению);
г. На недопустимых входных данных (по типу и формату).

Распозннаный текст:
```

```

################

Тебе будет дано описание некоторого алгоритма. Твоя задача - реализовать его на языке Python.











Тебе будет дан текст - результат распознавания речи (может содержать неточности). Данный текст представляет собой алгоритм представленный в виде стихотворения. Твоя задача - понять, что делает данный алгоритм и написать код на Python, который бы отвечал критериям:

ВАЖНО! При необходимости используй только СТАНДАРТНЫЕ БИБЛИОТЕКИ.

ВАЖНО! Код должен принимать входные данные через STDIN и возвращать результат работы через STDOUT. Примерно так, как это реализовано в коде на первой задаче. Если входные данные имеют неверный формат, тип или размер, или при вычислениях возникает неразрешимая ситуация, программа должна корректно завершиться и вывести ошибку в формате, описанном в задаче.

ВАЖНО! Данные должны вводиться и выводиться в том порядке, в котором они перечисляются в задании. Их формат обычно следующий:
- Разные виды данных должны разделяться переносом строки;
- Массив вводится и выводится через пробел;
- Матрица вводится и выводится построчно. Значения внутри строк разделяются пробелами, строки — знаком переноса строки;
- Ввод и вывод должны финально оканчиваться переносом строки.

ВАЖНО! В общем случае код будет проверяться на следующих типах входных данных, когда это допустимо:
а. На допустимых (по значению и формату) входных данных, находящихся внутри класса эквивалентности допустимых значений;
б. На допустимых (по значению и формату) входных данных, находящихся на экстремумах и границах класса эквивалентности допустимых значений;
в. На недопустимых входных данных (по значению);
г. На недопустимых входных данных (по типу и формату).

Текст:
```
Шаг 1. Ввод чисел начинается, сначала массив через пробел читается, эти числа в array превращаем. А сумму s на новой строке читаем.
Важно! Если при вводе случится беда выведем -1 и прервёмся тогда.
Важно! Все числа тут не отрицательны.
Шаг 2. Массив dp создаём размером s + 1. Заполним нулями, но dp[0] = 1.
Шаг 3. Проверяем, все числа array перебираем: берём число и идём в dp: "назад по j от s по number включительно". Если dp[j] - number = 1, то dp[j] тоже единицей должно искрится, так строим массив до самой вершины, чтоб сумма s появилась в картине
Шаг 4. Вывод финальный dp[s] единицей стал, тогда результат идеальный, выведем 1 - всё верно (ура), а если не вышло 0 - вот дела. Мы искали подмножества, где сумма в точности найдётся и если в dp и был ответ, то знали весь путь или нет.
```